name: FOSS Check

on:
  push:
    branches:
      - IAV-FF-feature-foss-check-integration-192

jobs:
  scan:
    name: SBOM & Vulnerability Scan for Root
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install all dependencies using workspaces
      - name: Install all dependencies with workspaces
        run: npm ci

      # Step 3: Generate root-level SBOM (CycloneDX JSON)
      - name: Generate SBOM (CycloneDX JSON) for root
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          output-file: sbom-root.cdx.json
          upload-artifact: false

      # Step 4: Upload root-level SBOM as an artifact
      - name: Upload root-level SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: root-sbom-cyclonedx
          path: sbom-root.cdx.json

      # Step 5: Scan the root-level SBOM for vulnerabilities
      - name: Scan SBOM for Vulnerabilities
        id: scan
        uses: anchore/scan-action@v4
        continue-on-error: true
        with:
          path: .
          fail-build: true
          severity-cutoff: high
          only-fixed: true
          output-format: sarif

      # Step 6: Upload Grype SARIF report
      - name: Upload Grype SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: grype-sarif
          path: ${{ steps.scan.outputs.sarif }}

      # Step 7: Fail build on high/critical vulnerabilities
      - name: Fail on High/Critical Vulnerabilities
        if: ${{ steps.scan.conclusion == 'failure' }}
        run: |
          echo "::error ::High/Critical vulnerabilities detected! Failing job."
          exit 1

  per-package-sbom:
    name: Generate SBOMs for Workspace Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for workspaces
        run: npm ci

      - name: Generate SBOMs for each workspace package
        run: |
          # Cleanup any existing SBOM files
          rm -rf sboms
          mkdir -p sboms

          # Loop through workspace patterns (apps/*, packages/*)
          for workspace in $(npm pkg get workspaces | jq -r '.[]'); do
            # Expand the workspace pattern to match only the first-level directories
            for package_path in $(find $workspace -maxdepth 1 -mindepth 1 -type d); do
              
              if [ -f "$package_path/package.json" ]; then
                echo "Processing package: $package_path"

                # Use Syft (Docker) to generate SBOM in CycloneDX format and include name/version
                docker run --rm \
                  -v "$PWD/$package_path":/scan \
                  -v "$PWD/sboms":/output \
                  anchore/syft:latest \
                  scan /scan --file /scan/package.json -o cyclonedx-json=/output/"$(basename $package_path)_sbom.cdx.json"
              else
                echo "Skipping $package_path. No package.json detected."
              fi
            done
          done

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: workspace-sboms
          path: sboms/

  ort-check:
    name: ORT License & Policy Check
    runs-on: ubuntu-latest
    needs: [scan, per-package-sbom]
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install all workspace dependencies
      - name: Install dependencies using npm workspaces
        run: npm ci

      # Step 3: Add ORT configuration files to the repository
      - name: Add ORT config to repo
        run: |
          mkdir -p .ort/config
          cat <<EOF > .ort/config/config.yml
          analyzer:
            allow_dynamic_versions: true
            skip_excluded: true

          excludes:
            paths:
              - pattern: 'packages/**'
                reason: 'BUILD_TOOL_OF'
                comment: 'Ignore internal packages'
              - pattern: 'apps/**'
                reason: 'BUILD_TOOL_OF'
                comment: 'Ignore internal apps'
            paths:
              - pattern: 'docs/.vite/deps/**'
                reason: 'BUILD_TOOL_OF'
                comment: 'Ignore Vite-generated dependency folder'
          EOF

          cat <<EOF > .ort/config/rules.kts
          licenseRule("DisallowedLicenses") {
              disallowed {
                  license("GPL")
                  license("AGPL")
              }
          }
          EOF

      # Step 4: Run ORT for license and policy checks
      - name: Run ORT
        id: ort
        uses: oss-review-toolkit/ort-ci-github-action@v1
        with:
          allow-dynamic-versions: 'true'

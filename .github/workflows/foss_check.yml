name: FOSS Check

on:
  push:
    branches:
      - IAV-FF-feature-foss-check-integration-192

jobs:
  foss-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          output-file: sbom.cdx.json
          upload-artifact: false

      - name: Scan for Vulnerabilities
        id: scan
        uses: anchore/scan-action@v4
        continue-on-error: true
        with:
          path: .
          fail-build: true
          severity-cutoff: high
          only-fixed: true
          output-format: sarif

      - name: Upload Grype SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: grype-sarif
          path: ${{ steps.scan.outputs.sarif }}

      # ─── MANUAL ORT SCAN (replaces the composite Action) ───────────────
      - name: Run full ORT scan via Docker
        shell: bash
        env:
          # point ORT at your local repo config
          ORT_REPO_CONFIG: './.ort.yml'
        run: |
          set -euo pipefail

          # 1) Pull the latest ORT image
          docker pull oss-review-toolkit/ort:latest

          # 2) Analyze (with dynamic Versions and your .ort.yml)
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/project" \
            -w /project \
            -e ORT_ALLOW_DYNAMIC_VERSIONS=true \
            oss-review-toolkit/ort:latest \
            analyze \
              -i . \
              -o /project/ort-results \
              --repository-configuration-file "${ORT_REPO_CONFIG}"

          # 3) Advise (CVE advisor)
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/project" \
            -w /project \
            oss-review-toolkit/ort:latest \
            advise \
              -i /project/ort-results \
              -o /project/ort-results \
              -f JSON

          # 4) Evaluate (license policy)
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/project" \
            -w /project \
            oss-review-toolkit/ort:latest \
            evaluate \
              -i /project/ort-results \
              -o /project/ort-results \
              --repository-configuration-file "${ORT_REPO_CONFIG}" \
              -f JSON

          # 5) Report (generate SBOM & HTML)
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/project" \
            -w /project \
            oss-review-toolkit/ort:latest \
            report \
              -i /project/ort-results \
              -o /project/ort-results \
              -O CycloneDX=output.file.formats=json \
              -O SpdxDocument=output.file.formats=json,html

          # 6) Fail if any license violations occurred
          #    (exit code 2 = policy violations in ORT evaluate)
          if grep -q '"ruleViolationsTotal":[^0]' ort-results/evaluation-result.json; then
            echo "::error ::License policy violations found!"
            exit 1
          fi

      - name: Upload Compliance Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: foss-reports
          path: |
            sbom.cdx.json
            *.sarif
            ort-reports/**

      - name: Fail on Vulnerabilities
        if: ${{ steps.scan.conclusion == 'failure' }}
        run: |
          echo "::error ::High/Critical vulnerabilities detected! Failing job."
          exit 1
